package com.redfrog.trafficsm.service;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Consumer;

import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.MarkerManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.util.concurrent.ThreadFactoryBuilder;
import com.redfrog.trafficsm.annotation.Aside;
import com.redfrog.trafficsm.annotation.BugPotential;
import com.redfrog.trafficsm.annotation.Config;
import com.redfrog.trafficsm.annotation.Main;
import com.redfrog.trafficsm.annotation.MainImp;
import com.redfrog.trafficsm.annotation.Messy;
import com.redfrog.trafficsm.annotation.MultiThreadPb;
import com.redfrog.trafficsm.annotation.Todo;
import com.redfrog.trafficsm.annotation.UseWithoutSpring;
import com.redfrog.trafficsm.controller.TrafficInfoPublisher;
import com.redfrog.trafficsm.model.Vehicle;
import com.redfrog.trafficsm.session.WindowSession;
import com.redfrog.trafficsm.shape.Point;
import com.redfrog.trafficsm.util.MathUtil;

import lombok.NonNull;
import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
public class MoveController {

  @UseWithoutSpring
  private final WindowSession windowSession_corr;

  @UseWithoutSpring
  public MoveController(WindowSession windowSession_corr) {
    this.windowSession_corr   = windowSession_corr;
    this.trafficInfoPublisher = trafficInfoPublisher_pseudoNoSpring;
  }

  //___

  private final TrafficInfoPublisher trafficInfoPublisher;
  private static final TrafficInfoPublisher trafficInfoPublisher_pseudoNoSpring = new TrafficInfoPublisher();

  @Autowired
  public MoveController(TrafficInfoPublisher trafficInfoPublisher) {
    this.windowSession_corr   = null;
    this.trafficInfoPublisher = trafficInfoPublisher;

  }

  //_________

  //_______________________________________________________________________________

  private static final Marker mk_Mui = MarkerManager.getMarker("Movement unitOfIncrement");

  //_________

  @Config
  public static final double marginOfError_Program_Movement = 1E-4; //_____________

  //_________

  @Config
  /**
____________________________________________________________________
____
____________________________________
_____
_________________________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
__*/
  public static final double limitMax_unitOfIncrement = 2.0;
  //________________________________________________________________

  //_____
  //_______________________________________________________________
  //_________________________________________________
  //_____________________________________________
  public static final double limitMin_unitOfIncrement = 1.0;

  static {
    if (limitMax_unitOfIncrement <= 0) { throw new Error(); }
    if (limitMin_unitOfIncrement > limitMax_unitOfIncrement) { throw new Error(); }
  }

  @Config
  private static final long ifSmallerThanThisAmountDontSleep = 25; //____
  //__________________________________________________________________________________________________________________________________________________________________
  //__________________________________

  //_________
  //____________________________________________________________________

  //_________

  //_____________________________________________________________________________
  //_______________________________________________________________________________________________________________________________________________________________________________
  //_________________________________________________________________
  //___________________________________________________________________________
  //________________________________________________________________________________________________
  //__________________________________________________________________________________________________________
  //____________________________________________________________________________________________________________________________________________

  private ThreadPoolExecutor executor_MoveController = new ThreadPoolExecutor(10, Integer.MAX_VALUE, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactoryBuilder().setNameFormat("thd-MoveController-%d").build());

  public FutureMovement<Boolean> gotoTarget(Point point_Target, Vehicle vehicle) { return gotoTarget(Arrays.asList(point_Target), vehicle, null); }

  public FutureMovement<Boolean> gotoTarget(List<Point> pathArr_point_TargetSegment, Vehicle vehicle) { return gotoTarget(pathArr_point_TargetSegment, vehicle, null); }

  //____________________
  //_________________________________________________________________________________________________________________________________________________________________________________________________________________

  @Main
  @MainImp
  @MultiThreadPb //___________________
  public FutureMovement<Boolean> gotoTarget(@NonNull List<Point> pathArr_point_TargetSegment, @NonNull Vehicle vehicle, Consumer<Vehicle> callbackWhenEnd) {
    log.debug(">> gotoTarget()");

    if (pathArr_point_TargetSegment.size() == 0) { throw new Error(); }

    //__________________________________________________________
    //_________________
    //__________________________________________________________________________________________________________________

    //________________________________________________________________________
    //_________________________________________________________________________
    //_____________________________________________________________________________________
    //____________________________________________________________________________
    //_____________________________________________________________
    //_______________________________________________________________________
    //____________________________________________________________
    //________________________________________________________
    //____________________________________

    final AtomicBoolean det_Pause_requested = new AtomicBoolean(false);
    final AtomicBoolean det_Paused_actually = new AtomicBoolean(false);
    final Semaphore semaphore_WaitUntilResume = new Semaphore(0);

    final CountDownLatch det_FinishedSuccessfully = new CountDownLatch(1);
    final CountDownLatch det_Ended = new CountDownLatch(1);

    //________________________________________________________________________________
    //__________________________________________
    //_______________________________________________________________________________
    //________________________________________
    //________________________________
    //________
    //_______
    //_____
    //__________________________________________

    Runnable runnable = new Runnable()
      {
        @Todo
        @Deprecated //_____________________
        double extraTimeTook_DueToThreadSleepWake_prev = 0;

        //_______________
        //_________________________________________________________________________

        double cummulator_For_IfDidntSleep_ThenBatchTheDidntSleepTimes_DoABatchSleep_WhenThisIsLargeEnough = 0;

        private Long time_VehicleSetPos_prev = null;
        private Long time_pub_VehicleSetPos_prev = null;
        private long sn_run = 0;

        //___________________________________________________________________
        @Override
        public void run() {
          //______________________________________


          for (final Point point_Target : pathArr_point_TargetSegment) {

            //_____________________
            //______________________
            //__________________________
            //__________________
            //_____________________________________________________________________
            //_____________
            //___________

            //________________________________________________________________
            while (true) {
              sn_run++;
              if (sn_run % 1000 == 0) { log.debug(">> still running gotoTarget() :: {}", sn_run); }

              long time_Start = System.currentTimeMillis();

              //____
              Point point_BeginOngoing = vehicle.getPosActual();
              if (point_BeginOngoing == null) { throw new Error(); }
              Double speedActual = vehicle.getSpeedActual();
              if (speedActual == null) { throw new Error(); }

              double distance = point_BeginOngoing.distance(point_Target);

              //____
              if (distance <= marginOfError_Program_Movement) {
                //__________________________________________
                //__________________________________________________
                @Messy byte dmy; //________________
                vehicle.setPosActual(point_Target);
                //____________________________________________________________
                //_____________________________________________
                break; //________________________________________________________________________________________________________
              }

              //____
              //_______________________________________________________________________________________________

              //_______________________________________
              //__________________________________________________________
              //______________
              if (speedActual == 0) {
                //____________________________________________________________________________________________________________________________________________
                //________________________________________________
                final Semaphore semaphore_UntilSpeedChanged = new Semaphore(0);

                vehicle.getPublisherSpeedChanged().take(1).subscribe((pair_speed) -> {
                  semaphore_UntilSpeedChanged.release();
                });

                try {
                  semaphore_UntilSpeedChanged.acquire();
                } catch (InterruptedException e) {
                  det_Ended.countDown();
                  return;
                }

                continue; //____________________
              }
              //___

              //____
              //______________________________________________________
              double limitMinDecimal_numOfExec_ForWholePath = distance / limitMax_unitOfIncrement;
              int limitMinInteger_numOfExec_ForWholePath = (int) Math.ceil(limitMinDecimal_numOfExec_ForWholePath); //_______________

              @Main double unitOfIncrement_forCurrPath = distance / limitMinInteger_numOfExec_ForWholePath;
              if (unitOfIncrement_forCurrPath > limitMax_unitOfIncrement) { throw new Error("Not_Reachable Should not"); }
              unitOfIncrement_forCurrPath = Math.max(unitOfIncrement_forCurrPath, limitMin_unitOfIncrement);

              //________________________________________________
              if (speedActual == 0) { throw new Error("Not_Reachable already checked above"); }
              double time_GetToTarget = distance / speedActual;

              @Main
              //_____________________________________________________________________________________________________
              //__________________________
              //______________________________
              double timeGap_CurrExecution_theoretical = time_GetToTarget / limitMinDecimal_numOfExec_ForWholePath; //_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

              //_____

              //_____________________________________________________________________________________________________________________________
              //______________________________________________________________________________________

              long time_CalculationDone = System.currentTimeMillis();

              @Messy //_____________________________________
              //________________________________________________________________________________________________________________________________________________________________________
              //______________________________________________________________________
              //_____________________________________________________
              double timeGap_threadShouldSleep_withoutCompensate = (timeGap_CurrExecution_theoretical - (time_CalculationDone - time_Start));

              if (timeGap_threadShouldSleep_withoutCompensate < 0) {
                double round = MathUtil.round(timeGap_threadShouldSleep_withoutCompensate, 2);
                if (round == 0 || round == -0.0) {
                  //______________________________________________
                }
                //_________________________________________________________________________________
                //________________________________
                //________________________________________________________________
                //_______________
                //__________________________________
                //________________________________________________________________
                //_______________
                else {
                  throw new Error("if this happens -- _ the code es calculation (execution time) _ is taking too long -- longer than _ the time required to move the moving obj by a unit (- smallest required amount) _ _ (<=> the time gap bt each execution) _ "
                                  + "\n" + "--> you can"
                                  + "\n" + "|-| reduce the speed of the moving obj "
                                  + "\n" + "|-| increase the limitMax_unitOfIncrement (dangerous, some other code logic may dep on this) "
                                  + "\n" + "|-| @Todo optimize the code here to further batch the executions "
                                  + "\n" + "-- so, less amount of executions are required --> _ the time gap bt each execution _ becomes large"
                                  + "\n" + "--- "
                                  + "\n" + "or could be Javafx precision pb ... (which should be dealt with by rounding); though not sure why that happens; also sometimes it may not throw, deps on the executions time of the current run."
                                  + "\n" + " :: " + timeGap_threadShouldSleep_withoutCompensate);
                }
              }

              final double cummulator_For_IfDidntSleep_NeedCompensate_GroupUp_ToSomeExtend_ThenDoABatchSleep_L = cummulator_For_IfDidntSleep_ThenBatchTheDidntSleepTimes_DoABatchSleep_WhenThisIsLargeEnough;
              double timeGap_threadShouldSleep_withCompensate = timeGap_threadShouldSleep_withoutCompensate + cummulator_For_IfDidntSleep_NeedCompensate_GroupUp_ToSomeExtend_ThenDoABatchSleep_L;

              if (timeGap_threadShouldSleep_withCompensate < ifSmallerThanThisAmountDontSleep) {
                //__________________________
                log.trace(mk_Mui, "You can execute, but this may be too fast -- too many executions, better batch them. > timeGap_CurrExecution_theoretical :: " + timeGap_CurrExecution_theoretical);
                cummulator_For_IfDidntSleep_ThenBatchTheDidntSleepTimes_DoABatchSleep_WhenThisIsLargeEnough += timeGap_CurrExecution_theoretical;
                if (cummulator_For_IfDidntSleep_ThenBatchTheDidntSleepTimes_DoABatchSleep_WhenThisIsLargeEnough < 0) { throw new Error("Shouldnt ; but after `cummulator_For_IfDidntSleep_ThenBatchTheDidntSleepTimes_DoABatchSleep_WhenThisIsLargeEnough -= System.currentTimeMillis() - time_SetPos_curr;` this may happen"); }
              }
              else {
                cummulator_For_IfDidntSleep_ThenBatchTheDidntSleepTimes_DoABatchSleep_WhenThisIsLargeEnough = 0;
                try {
                  log.trace(mk_Mui, "Batched sleep : timeGap_threadShouldSleep_withCompensate :: " + timeGap_threadShouldSleep_withCompensate);
                  Thread.sleep((long) (timeGap_threadShouldSleep_withCompensate));
                  //_________________________________________________________________________________________________
                } catch (InterruptedException e) {
                  det_Paused_actually.set(false);
                  det_Pause_requested.set(false);
                  det_Ended.countDown();
                  return;
                }
              }

              //_______________________________________________________________________________________________________________________
              //________________________________________
              //___________________________________________________________________________________________________________________________________________
              //_______________

              long time_SetPos_curr = System.currentTimeMillis();
              //________________________________________________________________________________
              long timeGap_SetPos_actual = time_SetPos_curr - time_Start;
              //_______________________________________________________________________________________________________________________________________________________
              vehicle.setPosActual(MathUtil.get_DiagonalDisplacement(point_BeginOngoing, point_Target, unitOfIncrement_forCurrPath).getRight());
              //______________________________________________________________________________________________
              if (trafficInfoPublisher != trafficInfoPublisher_pseudoNoSpring) {
                if (time_pub_VehicleSetPos_prev == null || time_SetPos_curr - time_pub_VehicleSetPos_prev > TrafficInfoPublisher.timeGap_pub_PosOfVehicle) {
                  log.debug(">> publish pub_PosOfVehicle :: " + vehicle.getPosActual());
                  trafficInfoPublisher.pub_PosOfVehicle(vehicle);
                  //________________________________________________________________________________________________
                  time_pub_VehicleSetPos_prev = time_SetPos_curr;
                }
              }

              long time_SetPos_After = System.currentTimeMillis();
              if (time_SetPos_After - time_SetPos_curr > 15) { throw new Error("vehicle.setPosActual() is taking too long (may due to sync PubSub) -- either shorten the timeGap / account for this lag in next sleep :: " + (time_SetPos_After - time_SetPos_curr)); }
              //____

              //_________________________________________________________________________________________________________________________

              //_____

              //_______________
              //____________________________________
              if (det_Pause_requested.get()) {
                //____________________________________________________________________________________________
                det_Paused_actually.set(true);
                try {
                  semaphore_WaitUntilResume.acquire();
                } catch (InterruptedException e) {
                  det_Paused_actually.set(false);
                  det_Pause_requested.set(false);
                  det_Ended.countDown();
                  return;
                }
                det_Paused_actually.set(false);
                det_Pause_requested.set(false);
              }
              //________________________________________________
              if (Thread.interrupted() || executor_MoveController.isShutdown()) { //_____
                det_Ended.countDown();
                return;
              }

              @Todo
              @Messy
              @BugPotential //__________________________________________________________________________________
              byte dmy693; //_
              //___________________________________________________________________________________________________________________________________________________________
              //______________________
              //_________________________________
              //_____________________________________________________________________________________________________________________________________________________________

              time_VehicleSetPos_prev = time_SetPos_curr;
            }

          }

          //___________________________
          if (callbackWhenEnd != null) { callbackWhenEnd.accept(vehicle); }
          det_FinishedSuccessfully.countDown();
          det_Ended.countDown();
          return;
        }
      };

    //______________________________________________________________________________________________
    Future<Boolean> future = executor_MoveController.submit(runnable, true);

    //_____

    //_______________________________________
    //_______________________________________________________

    final FutureMovement<Boolean> futureMovement = new FutureMovement<>(future, det_Pause_requested, det_Paused_actually, semaphore_WaitUntilResume, det_FinishedSuccessfully, det_Ended);
    return futureMovement;
  }

  @Messy
  @Aside
  //________________________________________________________________________________________________________________________________________________________
  //_______________________________________________________________________________________
  public static class FutureMovement<T> {

    //__________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //____________________________________________________________________________
    //__________________________
    //__________
    //_____________________________________________________________________________________
    //____________________________________________________________
    //________________________________________________________
    //____
    //______________________________________________________________________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //_______________________________________________________

    private final Future<T> future;

    private final AtomicBoolean det_Pause_requested;
    private final AtomicBoolean det_Paused_actually;
    private final Semaphore semaphore_WaitUntilResume;
    private final CountDownLatch det_FinishedSuccessfully;
    private final CountDownLatch det_Ended;

    public FutureMovement(Future<T> future, AtomicBoolean det_Pause_requested, AtomicBoolean det_Paused_actually, Semaphore semaphore_WaitUntilResume, CountDownLatch det_FinishedSuccessfully, CountDownLatch det_Ended) {
      super();
      this.future                    = future;
      this.det_Pause_requested       = det_Pause_requested;
      this.det_Paused_actually       = det_Paused_actually;
      this.semaphore_WaitUntilResume = semaphore_WaitUntilResume;
      this.det_FinishedSuccessfully  = det_FinishedSuccessfully;
      this.det_Ended                 = det_Ended;
    }

    public Future<T> getFuture() { return future; }

    //_________

    @Todo //___________________________________________________
    //____________________________________________________________________________________________________
    //__________________________________________________________________________________________________
    //________________________________________________________________________________________________________

    public boolean detmReachTarget() { return det_FinishedSuccessfully.getCount() == 0; }

    public boolean detmEnded() { return det_Ended.getCount() == 0; }

    public void waitUntilEnded() throws InterruptedException { det_Ended.await(); }

    //_________

    //______________________________________________________________________
    public synchronized void pause() {
      if (future.isDone() || future.isCancelled()) { return; }
      det_Pause_requested.set(true);
    }

    /**
____________________________________________
___________________________________________________
______________________________________________________
____*/
    public synchronized long pauseSync() throws InterruptedException {
      if (future.isDone() || future.isCancelled()) { return 0; }
      det_Pause_requested.set(true);

      long prev = System.currentTimeMillis();
      //______________________________________________________________________________________________________________
      //_______________________________________________________________________________________________________________________
      while (!(det_Paused_actually.get() || detmEnded())) {
        Thread.sleep(50);
      }
      //______________________________________________________________________________________________________

      return System.currentTimeMillis() - prev;
    }

    public synchronized void resume() {
      if (future.isDone() || future.isCancelled()) { return; }
      @MultiThreadPb byte bbb;
      if (det_Paused_actually.get()) {
        int availablePermits = semaphore_WaitUntilResume.availablePermits();
        if (availablePermits == 0) {
          semaphore_WaitUntilResume.release();
        }
        else if (availablePermits == 1) {
          throw new Error("Not_Reachable if its pasued, semaphore must be 0");
        }
        else {
          throw new Error("Not_Reachable should only be 1 or 0");
        }
      }
    }

  }

  //__

  //_____________

  public void shutDown() {
    executor_MoveController.shutdown();

  }

}

//_______
//______________________________________
//_________________________________________________________________________
//
//________________________________________________________________
//_______________________
//________________________________________________________________________________________________________________________
//
//________________________________________________________________________
//_________________________________________________________________________
//_____________________________________________________________________________________
//____________________________________________________________________________
//_____________________________________________________________
//_______________________________________________________________________
//____________________________________________________________
//________________________________________________________
//_____________________________________
//_________________________________________________________________
//_____________________________________________________________________________________________________________________________________________________________________________________________________________
//
//__________
//___________________________________________________________________________
//______________________________________________________________________________
//_______
//_____________________________________________________________________________
//_________________
//___________________________
//_________________
//______________________________________
//
//____________________________________________________________
//________________________________________________________________
//________________________________________________________
//_________________________________________________________
//
//___________________________________________________
//______________________________________________________________________
//_________________________________
//__________________________________________________________________________________________________________________________________________________________
//______________________________________________________________
//___________________________________________________________________________
//
//__________________________________________________________________________________
//____________________________________________________
//_______________
//
//_________________
//____________________________________________________
//______________________________________________
//______________________________________________________________
//__________________________________
//_____________________
//_____________
//
//________________________
//___________________
//___________
//
//______________________________________________________________________________
//
//______________________________________________________________________
//
//___________________________________________________________
//________________________________________________________
//________________________________________________________________
//____________________________________________________________
//_______________________________________________
//________________________________
//___________________
//___________
//________________
//____________________________________________________________________
//________________________________________________________________________________________________
//___________________________________________________________________________________________________________________________________
//
//_________________________________________________________________________________________________________
//________________________________________________________________________________________________________________________
//
//______________________________________________________________________________________________________________________________________________
//
//______________________________________________________________
//_____________________________________________________________________________________________
//_____________________________________________________________
//
//_________________
//___________________________________________________________________________________________________________________
//________________________________________
//____________________________________________
//__________________________________________________________________________________________________________
//_____________________________________________________________
//_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
//______________________________________________
//__________________________________________
//____________________________________
//________________________________________
//_______________________________________________________________________________________________________________________
//_____________
//
//___________________
//
//_________________________________________________
//_______________________________________________________________________________________________________
//___________________________________________________________________________________________________________________
//____________________________
//_________________________________
//_____________________________
//__________________________________________________
//
//______________________________________________________________________________________________
//_____________________________________________________________
//______________________________________________________________
//__________________________________
//_____________________
//_____________
//____________________________________________
//___________________
//_________________________
//____________________________________________________
//________________________________________________
//_______________________________________
//________________________________________________________________
//____________________________________
//_______________________
//_______________
//_____________
//
//_____________________________________________________________________________________________________________________________
//
//______________________________________________
//____________________________________________
//_____________________________________________________
//
//___________
//_________
//___________________________________
//
//____________
//______________________________________________
//_______________________
//______________________
//___________
//____________________________________________
//______________________
//_________________________________________________
//___________________________________________
//___________
//________________
//_________________________________________________________
//___________
//____________________________
//_________
//________________________________________
//___________________________
//______________________________________
//_____________
//_____________________________
//_______________________________________
//___________________
//____________________________
//___________________
//________________________________
//______________________________
//_________
//_______
//_______________
//
//__________________________
//___
//
//_______
//
//______________________________________
//__________________________________________________________________________________________
//______________________________________
//________
//__________________________________________________________________
//____________________________________________________________________________________________
//______________________________________
//
//__________________________________________________________________________________________
//_____________________________________________________
//______________________________________________________________
//_____________________________________________________________________
//
//____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
//______________
//______________________________________________________________________
//_____________________________________________________________________________________
//__________________________________________________________________________
//___________________________________________________________
//_____________________________________________________________________
//___________________________________________________________________________
//_____
//
//___________
//
//______________________________________________________________________________________________________________________________________________
//____________________________________________________________________________
//__________________________
//______________________________________
//_____________________________________
//___________________________________________________________________
//_____________________________
//______________________________________
//____________________________________________________________________________
//____________________________________
//__________________________________________________
//_________
//_________________________________________
//_________________________________________________________________________________________________
//_________
//______________
//_________________________________________________________________
//_________
//_______
//_____
//
//___________
//
//_______________________________________________________
//
//____________________________________________
//_________________________________________________________
//__________________________________________
//
//_______________________________________________________________________
//__________________________________________________________
//____________________________________________
//_________________________________________________________________________________
//_______________________________________
//__________________________
//_______
//____________
//_________________________________________________________________________________
//________________________________________________________
//____________________________________________________
//__________________________________________________________________________
//_______
//_____
//
//__________________________________________________________________________________________
//_______________________________________________________________________________________________________________________________________________________________
//___________________________________________________
//_______________________
//_____________________________________________________________________
//______________________________________________________________________
//____________________________________________________
//_____________
//
//___________
//
//____________________________________________________
//____________________________________________________
//______________________________________________________
//
//____________________________________________________________________________
//_________________________
//______________________________________
//_________________________________________________
//____________________________________
//_____
//
//__________________________
//______________________________________
//___________________________________________________
//_________________________________________________
//_______________
//_________________________________________________
//_____________________________________________________________
//______________________________
//______________________________________
//____________________________________________________________________________
//____________________________________
//_________________________________________
//__________________________________________________
//_________
//_________________________________________
//________________________________________
//_________
//______________
//_________________________________________________________________
//_________
//_______
//_____
//
//___