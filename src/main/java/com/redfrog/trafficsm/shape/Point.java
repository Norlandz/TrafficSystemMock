package com.redfrog.trafficsm.shape;

import java.io.Serializable;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Embeddable;

import org.hibernate.annotations.Immutable;

import com.redfrog.trafficsm.annotation.UseByLibOnly;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;

//________________________
@Embeddable
//_______
@Immutable //______________________________________
//_____
@Getter
@EqualsAndHashCode
@ToString
//__________________________________________________________________________________________
//___________________________________________________________________
@Access(AccessType.FIELD) //_______________________________________________________________________________________
public class Point implements Serializable {

  //_____
  //_________________________________________________________
  //_____
  //____________________________________________________________

  //___
  //_________________________
  //__________________
  //___
  //_____________________________________________________________________________________________________________________
  //_
  //____________________________________________________
  //_________________________________________________________________________________
  //_______________________________________________________

  private final Double x;
  private final Double y;
  private final Double z;

  private final Dimension dimension;

  //_____
  //_____________________________________________________
  //_____________________________________________
  //____________________________
  //_____________________

  @UseByLibOnly
  protected Point() {
    this.x    = 0.0;
    this.y    = 0.0;
    this.z    = 0.0;
    dimension = null;
  }

  //____________
  //___________
  //________________________________________________________________

  public Point(double x) {
    this.x    = x;
    this.y    = 0.0;
    this.z    = 0.0;
    //___________________________________________
    //___________________________________________________________________________________________________________________
    //____________________
    dimension = Dimension.D1;
  }

  public Point(double x, double y) {
    this.x    = x;
    this.y    = y;
    this.z    = 0.0;
    dimension = Dimension.D2;
  }

  /**
_____________________________________________
___________________________________________________
___________________________________________________
___________________________________________________
___*/
  public Point(double x, double y, double z) {
    this.x    = x;
    this.y    = y;
    this.z    = z;
    dimension = Dimension.D3;
  }

  /**
_____________________________________________________________________________
____
______________________________________________
______________________________________________
______________________________________________
____________________________________________________________________________
___*/
  public double distance(double x1, double y1, double z1) {
    double a = getX() - x1;
    double b = getY() - y1;
    double c = getZ() - z1;
    return Math.sqrt(a * a + b * b + c * c);
  }

  /**
______________________________________________________________________________
____
_________________________________
_____________________________________________________________________________
________________________________________________________________________
___*/
  public double distance(Point point) { return distance(point.getX(), point.getY(), point.getZ()); }

  /**
____________________________________________________________________________
___________________
_______________________________________
_______________________________________
_______________________________________
_____________________________________________
______________________
___*/
  public Point add(double x, double y, double z) { return new Point(
                                                                    getX() + x,
                                                                    getY() + y,
                                                                    getZ() + z); }

  /**
_____________________________________________________________________________
_______________________________
_____________________________________________________________
_____________________________________________
________________________________________________________________________
______________________
___*/
  public Point add(Point point) { return add(point.getX(), point.getY(), point.getZ()); }

  /**
___________________________________________________________________
___________________________________
__________________________________________
__________________________________________
__________________________________________
__________________________________________________
______________________
___*/
  public Point subtract(double x, double y, double z) { return new Point(
                                                                         getX() - x,
                                                                         getY() - y,
                                                                         getZ() - z); }

  /**
___________________________________________________________________________
________________________________________
__________________________________________________________________
__________________________________________________
________________________________________________________________________
______________________
___*/
  public Point subtract(Point point) { return subtract(point.getX(), point.getY(), point.getZ()); }

  /**
__________________________________________________________________
____________________________
_________________________________________________________
__________________________________________________
______________________
___*/
  public Point multiply(double factor) { return new Point(getX() * factor, getY() * factor, getZ() * factor); }

  /**
___________________________________________________________________________
_______________________________________________________________________
_________________________________________________________
__________________________________________________________________________
______________________
___*/
  public Point normalize() {
    final double mag = magnitude();

    if (mag == 0.0) { return new Point(0.0, 0.0, 0.0); }

    return new Point(
                     getX() / mag,
                     getY() / mag,
                     getZ() / mag);
  }

  /**
________________________________________________________________________
___________________________
_____________________________________________________
_____________________________________________________
_____________________________________________________
____________________________________
______________________
___*/
  public Point midpoint(double x, double y, double z) { return new Point(
                                                                         x + (getX() - x) / 2.0,
                                                                         y + (getY() - y) / 2.0,
                                                                         z + (getZ() - z) / 2.0); }

  /**
________________________________________________________________________
_____________________
____________________________________
____________________________________
________________________________________________________________________
______________________
___*/
  public Point midpoint(Point point) { return midpoint(point.getX(), point.getY(), point.getZ()); }

  /**
___________________________________________________________________
____________________________________________
_________________________________________________
_________________________________________________
_________________________________________________
__________________________________________________________________
______________________
___*/
  public double angle(double x, double y, double z) {
    final double ax = getX();
    final double ay = getY();
    final double az = getZ();

    final double delta = (ax * x + ay * y + az * z) / Math.sqrt(
                                                                (ax * ax + ay * ay + az * az) * (x * x + y * y + z * z));

    if (delta > 1.0) { return 0.0; }
    if (delta < -1.0) { return 180.0; }

    return Math.toDegrees(Math.acos(delta));
  }

  /**
___________________________________________________________________
_____________________________________________________________________
__________________________________
___________________________________________________________________
___________________________________________________________________
________________________________________________________________________
______________________
___*/
  public double angle(Point point) { return angle(point.getX(), point.getY(), point.getZ()); }

  /**
_____________________________________________________________________________
_________________
________________________
__________________________
_________________________________________________________________________
__________________________________________________________________________
_____________________________
_________________________________________________________________________
______________________
___*/
  public double angle(Point p1, Point p2) {
    final double x = getX();
    final double y = getY();
    final double z = getZ();

    final double ax = p1.getX() - x;
    final double ay = p1.getY() - y;
    final double az = p1.getZ() - z;
    final double bx = p2.getX() - x;
    final double by = p2.getY() - y;
    final double bz = p2.getZ() - z;

    final double delta = (ax * bx + ay * by + az * bz) / Math.sqrt(
                                                                   (ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));

    if (delta > 1.0) { return 0.0; }
    if (delta < -1.0) { return 180.0; }

    return Math.toDegrees(Math.acos(delta));
  }

  /**
_____________________________________________________________________________
______________________
____________________________________
______________________
___*/
  public double magnitude() {
    final double x = getX();
    final double y = getY();
    final double z = getZ();

    return Math.sqrt(x * x + y * y + z * z);
  }

  /**
_____________________________________________________________________________
______________________________
_________________________________________________
_________________________________________________
_________________________________________________
_______________________________________________
______________________
___*/
  public double dotProduct(double x, double y, double z) { return getX() * x + getY() * y + getZ() * z; }

  /**
_____________________________________________________________________________
______________________________
___________________________________
_______________________________________________
_________________________________________________________________________
______________________
___*/
  public double dotProduct(Point vector) { return dotProduct(vector.getX(), vector.getY(), vector.getZ()); }

  /**
______________________________________________________________________
______________________________
_________________________________________________
_________________________________________________
_________________________________________________
_________________________________________________
______________________
___*/
  public Point crossProduct(double x, double y, double z) {
    final double ax = getX();
    final double ay = getY();
    final double az = getZ();

    return new Point(
                     ay * z - az * y,
                     az * x - ax * z,
                     ax * y - ay * x);
  }

  /**
______________________________________________________________________
______________________________
___________________________________
_________________________________________________
_________________________________________________________________________
______________________
___*/
  public Point crossProduct(Point vector) { return crossProduct(vector.getX(), vector.getY(), vector.getZ()); }

  //_____
  //__________________
  //____
  //______________
  //_____
  //___________
  public Point interpolate(Point endValue, double t) {
    if (t <= 0.0) return this;
    if (t >= 1.0) return endValue;
    return new Point(
                     getX() + (endValue.getX() - getX()) * t,
                     getY() + (endValue.getY() - getY()) * t,
                     getZ() + (endValue.getZ() - getZ()) * t);
  }

  //_____
  //_____________________________________________
  //_____________________________________________
  //_____
  //___________
  //_____________________________________
  //_________________________________
  //_______________________________
  //________________________________
  //________________________________________________________________________________________
  //_____
  //________
  //___________________
  //___
  //
  //_________
  //_____________________________________________________________
  //_________
  //___________________________
  //____
  //__________________________________
  //________________________________________________________________________________________________________________________________________________________________
  //____
  //_________
  //___________________________________________________________
  //___________________________________________________________
  //_________
  //_______________
  //_____________________________
  //________________________
  //_________________________
  //______________________________________________________________
  //______________________________________________________________
  //______________________________________________________________
  //_____________________________________________
  //_________
  //____________________
  //_______
  //
  //_____
  //___________________________________________________________
  //________________________________________________________________________
  //_____________________________________________________________________
  //_____________________
  //___________________________________________________________________
  //_____
  //___________
  //___________________________________________________________________________________________________________

  public String toString() {
    //_______________________________________________________________________________________
    if (dimension == Dimension.D2) { return String.format("Pt[%3.6f, %3.6f]", x, y); }
    if (dimension == Dimension.D3) { return "Pt[x=" + getX() + ", y=" + getY() + ", z=" + getZ() + "]"; }
    return "Point-" + hashCode();
  }

}
