package com.redfrog.trafficsm.mainrepotest;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.redfrog.trafficsm.model.roadway.fundamental.RoadwayDirLinkerComponent;
import com.redfrog.trafficsm.model.roadway.fundamental.RoadwayPoint;
import com.redfrog.trafficsm.model.roadway.fundamental.RoadwaySegment;
import com.redfrog.trafficsm.model.roadway.fundamental.pseudo.RoadwaySegmentPseudoBegin;
import com.redfrog.trafficsm.model.roadway.main.RoadwayNormalPoint;
import com.redfrog.trafficsm.model.roadway.main.RoadwayNormalSegment;
import com.redfrog.trafficsm.model.roadway.main.RoadwaySolidRoad;
import com.redfrog.trafficsm.repository.dao.GenericDao;
import com.redfrog.trafficsm.shape.Point;
import com.redfrog.trafficsm.util.TestUtil;

import lombok.extern.log4j.Log4j2;



//________
//_____
//________________________________________________________________________________________________________
//___
//________________________________________________________________
//___
//_______________________________
//_____________________________________________________
//_______________
//____________________________________________________________________________
//_____
//_____________________________________________________________________________________________________
//
//______________
//________________________
//___________________________________
//_____________________________________________
//_____________________________________________________
//__________________________
//_______________
//_______________________________________________________________________________________________________________________________
@SpringBootTest
@Log4j2
class MapBuilderCreateRoadwayRepoMethodSubUnitTest {

  //____________
  //________________________________________________________
  //
  //____________
  //____________________________________________________________
  //
  //____________
  //__________________________________________________________________________________
  //
  //____________
  //______________________________________________________________

  @Autowired
  //__________________________________________________
  private GenericDao<RoadwayPoint> roadwayPointDao;

  @PersistenceContext
  //_____________________________________________________________
  private EntityManager em;

  //____________
  //_____________________________________

  //_________________________________________________

  //__________________________________________________________________________________________________________________________
  //____________
  //________________________________________________________________________
  //______________________________________________________________________________________
  //________________________________
  //___

  

  @Test
  @Transactional
  public void trival_01__1_point__use_em() {
    String idRoadway = "Ro1";

    Point point_curr;
    int i = 0;

    i++;
    point_curr = new Point(100.000000, 100.000000);
    RoadwayNormalPoint roadwayNormalPoint_curr = new RoadwayNormalPoint(idRoadway + "-" + i, point_curr);
    //____________________________________________________________________________________________________________
    //___________________________________________________________________________________________________
    em.persist(roadwayNormalPoint_curr);
    em.flush();
    //___________________________
    //______________________________________________________________________________________________________________________________
    //___________________

    long id = roadwayNormalPoint_curr.getIdSql(); //_____________________________________________________________________
    //___________________________________________
    log.debug(id);

    //_______________
    //______________________________________
    RoadwayNormalPoint roadwayNormalPoint_FC = em.find(RoadwayNormalPoint.class, id);
    log.debug(roadwayNormalPoint_curr);
    log.debug(roadwayNormalPoint_FC);
    TestUtil.assertEquals_NoStop(roadwayNormalPoint_FC, roadwayNormalPoint_curr);
    TestUtil.assertSame_NoStop(roadwayNormalPoint_FC, roadwayNormalPoint_curr);

    //________________________________

    //____________________________________________________________________________
    em.clear();
    RoadwayNormalPoint roadwayNormalPoint_FN = em.find(RoadwayNormalPoint.class, id);
    log.debug(roadwayNormalPoint_curr);
    log.debug(roadwayNormalPoint_FN);
    TestUtil.assertEquals_NoStop(roadwayNormalPoint_FN, roadwayNormalPoint_curr);
    TestUtil.assertNotSame_NoStop(roadwayNormalPoint_FN, roadwayNormalPoint_curr); //______________________________

    //___________________________________________________________________
    //___
    //____________________________________
    //_____________________
    //_______________
    System.out.println(roadwayNormalPoint_FN.equals(roadwayNormalPoint_curr));
    //___________________________________________________
    System.out.println(roadwayNormalPoint_curr.getRoadwayPointCodeInsCreationTime());
    System.out.println(roadwayNormalPoint_FN.getRoadwayPointCodeInsCreationTime());
    System.out.println(roadwayNormalPoint_FN.getEntityCodeInsCreationTime());

    //__________________________________
  }

  @Test
  @Transactional
  public void trival_01__1_point__use_dao() {
    String idRoadway = "Ro1";

    Point point_curr;
    int i = 0;

    i++;
    point_curr = new Point(100.000000, 100.000000);
    RoadwayNormalPoint roadwayNormalPoint_curr = new RoadwayNormalPoint(idRoadway + "-" + i, point_curr);
    roadwayPointDao.persist(roadwayNormalPoint_curr);
    //_______________

    long id = roadwayNormalPoint_curr.getIdSql();

    //__________
    RoadwayPoint roadwayNormalPoint_FC = roadwayPointDao.find(id);
    log.debug(roadwayNormalPoint_curr);
    log.debug(roadwayNormalPoint_FC);
    TestUtil.assertEquals_NoStop(roadwayNormalPoint_FC, roadwayNormalPoint_curr);
    TestUtil.assertSame_NoStop(roadwayNormalPoint_FC, roadwayNormalPoint_curr);

    //________________
    //_______________
    roadwayPointDao.flush(); //__________________________________________________________________
    roadwayPointDao.clear();
    RoadwayPoint roadwayNormalPoint_FN = roadwayPointDao.find(id);
    log.debug(roadwayNormalPoint_curr);
    log.debug(roadwayNormalPoint_FN);
    TestUtil.assertEquals_NoStop(roadwayNormalPoint_FN, roadwayNormalPoint_curr);
    TestUtil.assertNotSame_NoStop(roadwayNormalPoint_FN, roadwayNormalPoint_curr); //______________________________

    //__________________________________________________________________________________________________
    //______________________________________
  }

  @Test
  @Transactional
  public void trival_02__3_point() {

    String idRoadway = "Ro1";

    ArrayList<Point> pathArr_point = new ArrayList<>();
    pathArr_point.add(new Point(100.000000, 100.000000));
    pathArr_point.add(new Point(200.000000, 200.000000));
    pathArr_point.add(new Point(300.000000, 500.000000));

    int i = 0;
    for (Point point_curr : pathArr_point) {
      i++;
      RoadwayNormalPoint roadwayNormalPoint_curr = new RoadwayNormalPoint(idRoadway + "-" + i, point_curr);
      em.persist(roadwayNormalPoint_curr);

      em.flush();
      em.clear();

      long id = roadwayNormalPoint_curr.getIdSql();
      log.debug(id);
      RoadwayNormalPoint roadwayNormalPoint_FN = em.find(RoadwayNormalPoint.class, id);

      log.debug(roadwayNormalPoint_curr);
      log.debug(roadwayNormalPoint_FN);
      TestUtil.assertEquals_NoStop(roadwayNormalPoint_FN, roadwayNormalPoint_curr);
      TestUtil.assertNotSame_NoStop(roadwayNormalPoint_FN, roadwayNormalPoint_curr);
    }

    //__________________________________
  }

  @Test
  @Transactional
  //__________________________________________________________
  public void trival_03__2_point_1_segment() {
    String idRoadway = "Ro1";

    ArrayList<Point> pathArr_point = new ArrayList<>();
    pathArr_point.add(new Point(100.000000, 100.000000));
    pathArr_point.add(new Point(200.000000, 200.000000));

    int i = 0;

    i++;
    RoadwayNormalPoint roadwayNormalPoint_prev = new RoadwayNormalPoint(idRoadway + "-" + i, pathArr_point.get(i - 1));
    i++;
    RoadwayNormalPoint roadwayNormalPoint_curr = new RoadwayNormalPoint(idRoadway + "-" + i, pathArr_point.get(i - 1));
    em.persist(roadwayNormalPoint_prev);
    em.persist(roadwayNormalPoint_curr);
    em.flush();
    em.clear(); //__________________________________________________________________________________

    log.debug(roadwayNormalPoint_prev.getIdSql());
    log.debug(roadwayNormalPoint_curr.getIdSql());

    //_______________________________________________
    //________________________________________________________________________________________
    //___________________________________________
    //_______________________________
    //________________________________________________________________________________
    RoadwayNormalSegment roadwaySegment_btPrevCurr = new RoadwayNormalSegment(roadwayNormalPoint_prev, roadwayNormalPoint_curr);
    em.persist(roadwaySegment_btPrevCurr);
    em.flush();
    em.clear(); //__________________________________________________

    //_______________
    //________________________________
    //_____________
    //___________________________________________________________________________
    //_________________________________________________________________
    //___________________________________________________
    //_____________________________
    //_____________________________________________

    //
    RoadwayNormalSegment roadwaySegment_btPrevCurr_FN = em.find(RoadwayNormalSegment.class, roadwaySegment_btPrevCurr.getIdSql());

    TestUtil.assertEquals_NoStop(roadwaySegment_btPrevCurr_FN, roadwaySegment_btPrevCurr);
    TestUtil.assertNotSame_NoStop(roadwaySegment_btPrevCurr_FN, roadwaySegment_btPrevCurr);

    TestUtil.assertEquals_NoStop(roadwayNormalPoint_prev, roadwaySegment_btPrevCurr_FN.getRoadwayPointSp());
    TestUtil.assertEquals_NoStop(roadwayNormalPoint_curr, roadwaySegment_btPrevCurr_FN.getRoadwayPointNp());

  }

  //________________________________________________________________________________________________

  //_______
  //________________
  //_______________________________________________________
  //__________________________________________________________________________________________________
  //__________________________________
  //___

  @Test
  @Transactional
  public void trival_04__2_point_1_segment_1_linker() {
    String idRoadway = "Ro1";

    ArrayList<Point> pathArr_point = new ArrayList<>();
    pathArr_point.add(new Point(100.000000, 100.000000));
    pathArr_point.add(new Point(200.000000, 200.000000));

    int i = 0;

    i++;
    RoadwayNormalPoint roadwayNormalPoint_prev = new RoadwayNormalPoint(idRoadway + "-" + i, pathArr_point.get(i - 1));
    i++;
    RoadwayNormalPoint roadwayNormalPoint_curr = new RoadwayNormalPoint(idRoadway + "-" + i, pathArr_point.get(i - 1));
    em.persist(roadwayNormalPoint_prev);
    em.persist(roadwayNormalPoint_curr);

    RoadwayNormalSegment roadwaySegment_btPrevCurr = new RoadwayNormalSegment(roadwayNormalPoint_prev, roadwayNormalPoint_curr);
    em.persist(roadwaySegment_btPrevCurr);

    RoadwayDirLinkerComponent roadwayLinkerComponent_btPrevToCurr = new RoadwayDirLinkerComponent(roadwaySegment_btPrevCurr, roadwayNormalPoint_curr);
    em.persist(roadwayLinkerComponent_btPrevToCurr);

    //__________________________________________________________________________________
    //_______________________________________________________________________________________________
    em.flush();
    em.clear();

    //
    RoadwayDirLinkerComponent roadwayLinkerComponent_btPrevToCurr_FN = em.find(RoadwayDirLinkerComponent.class, roadwayLinkerComponent_btPrevToCurr.getIdSql());

    TestUtil.assertEquals_NoStop(roadwayLinkerComponent_btPrevToCurr_FN, roadwayLinkerComponent_btPrevToCurr);
    TestUtil.assertNotSame_NoStop(roadwayLinkerComponent_btPrevToCurr_FN, roadwayLinkerComponent_btPrevToCurr);

    TestUtil.assertEquals_NoStop(roadwayNormalPoint_curr, roadwayLinkerComponent_btPrevToCurr_FN.getRoadwayPoint());
    TestUtil.assertEquals_NoStop(roadwaySegment_btPrevCurr, roadwayLinkerComponent_btPrevToCurr_FN.getRoadwaySegment());
    TestUtil.assertEquals_NoStop(roadwayNormalPoint_prev, roadwayLinkerComponent_btPrevToCurr_FN.getRoadwaySegment().getRoadwayPointSp());
    TestUtil.assertEquals_NoStop(roadwayNormalPoint_curr, roadwayLinkerComponent_btPrevToCurr_FN.getRoadwaySegment().getRoadwayPointNp());
    TestUtil.assertNotSame_NoStop(roadwayNormalPoint_curr, roadwayLinkerComponent_btPrevToCurr_FN.getRoadwayPoint());
    TestUtil.assertNotSame_NoStop(roadwaySegment_btPrevCurr, roadwayLinkerComponent_btPrevToCurr_FN.getRoadwaySegment());
    TestUtil.assertNotSame_NoStop(roadwayNormalPoint_prev, roadwayLinkerComponent_btPrevToCurr_FN.getRoadwaySegment().getRoadwayPointSp());
    TestUtil.assertNotSame_NoStop(roadwayNormalPoint_curr, roadwayLinkerComponent_btPrevToCurr_FN.getRoadwaySegment().getRoadwayPointNp());

    //__________________________________________________________________
    //____________________________________
    //_______________________________________________________________________________________________________________________
    //_________________________________
    //________________
    //______________________________________
    //___________________________________________________________________________________________________
  }

  @Test
  @Transactional
  public void case__2_point_1_segment_1_linker__point_linker_hashmap_connection() {
    String idRoadway = "Ro1";

    ArrayList<Point> pathArr_point = new ArrayList<>();
    pathArr_point.add(new Point(100.000000, 100.000000));
    pathArr_point.add(new Point(200.000000, 200.000000));

    int i = 0;

    i++;
    RoadwayNormalPoint roadwayNormalPoint_prev = new RoadwayNormalPoint(idRoadway + "-" + i, pathArr_point.get(i - 1));
    i++;
    RoadwayNormalPoint roadwayNormalPoint_curr = new RoadwayNormalPoint(idRoadway + "-" + i, pathArr_point.get(i - 1));
    em.persist(roadwayNormalPoint_prev);
    em.persist(roadwayNormalPoint_curr);

    RoadwayNormalSegment roadwaySegment_btPrevCurr = new RoadwayNormalSegment(roadwayNormalPoint_prev, roadwayNormalPoint_curr);
    em.persist(roadwaySegment_btPrevCurr);

    RoadwayDirLinkerComponent roadwayLinkerComponent_btPrevToCurr = new RoadwayDirLinkerComponent(roadwaySegment_btPrevCurr, roadwayNormalPoint_curr);
    em.persist(roadwayLinkerComponent_btPrevToCurr);

    em.flush();
    em.clear();

    //_____

    //________________________________________
    roadwayNormalPoint_prev.getMppRoadwayDirLinkerComponent().put(roadwayNormalPoint_curr, roadwayLinkerComponent_btPrevToCurr);

    //________________
    RoadwayNormalPoint roadwayNormalPoint_prev_FN = em.find(RoadwayNormalPoint.class, roadwayNormalPoint_prev.getIdSql());

    log.debug(roadwayNormalPoint_prev.getMppRoadwayDirLinkerComponent());
    log.debug(roadwayNormalPoint_prev_FN.getMppRoadwayDirLinkerComponent());
    TestUtil.assertEquals_NoStop(1, roadwayNormalPoint_prev.getMppRoadwayDirLinkerComponent().size());
    TestUtil.assertEquals_NoStop(0, roadwayNormalPoint_prev_FN.getMppRoadwayDirLinkerComponent().size());

    //_____

    //______________________________________
    //__________________________________
    roadwayNormalPoint_prev_FN.getMppRoadwayDirLinkerComponent().put(roadwayNormalPoint_curr, roadwayLinkerComponent_btPrevToCurr);
    //_________________________________________________________________________________________________

    //____________________________________________
    em.flush();
    em.clear();

    RoadwayNormalPoint roadwayNormalPoint_prev_FN_02 = em.find(RoadwayNormalPoint.class, roadwayNormalPoint_prev_FN.getIdSql());

    log.debug(roadwayNormalPoint_prev_FN.getMppRoadwayDirLinkerComponent());
    log.debug(roadwayNormalPoint_prev_FN_02.getMppRoadwayDirLinkerComponent());
    TestUtil.assertEquals_NoStop(1, roadwayNormalPoint_prev_FN.getMppRoadwayDirLinkerComponent().size());
    TestUtil.assertEquals_NoStop(1, roadwayNormalPoint_prev_FN_02.getMppRoadwayDirLinkerComponent().size());

    //_____________________________________________
    TestUtil.assertEquals_NoStop(roadwayNormalPoint_curr, roadwayNormalPoint_prev_FN_02.getMppRoadwayDirLinkerComponent().keySet().iterator().next());
    TestUtil.assertEquals_NoStop(roadwayLinkerComponent_btPrevToCurr, roadwayNormalPoint_prev_FN_02.getMppRoadwayDirLinkerComponent().values().iterator().next());
    TestUtil.assertNotSame_NoStop(roadwayNormalPoint_curr, roadwayNormalPoint_prev_FN_02.getMppRoadwayDirLinkerComponent().keySet().iterator().next());
    TestUtil.assertNotSame_NoStop(roadwayLinkerComponent_btPrevToCurr, roadwayNormalPoint_prev_FN_02.getMppRoadwayDirLinkerComponent().values().iterator().next());

  }

  @Test
  @Transactional
  public void multi_point_linker_hashmap_connection() {
    String idRoadway = "Ro1";

    ArrayList<Point> pathArr_point = new ArrayList<>();
    pathArr_point.add(new Point(100.000000, 100.000000));
    pathArr_point.add(new Point(200.000000, 200.000000));
    pathArr_point.add(new Point(300.000000, 500.000000));

    ArrayList<RoadwayNormalPoint> arr_roadwayNormalPoint_OO = new ArrayList<>();
    ArrayList<RoadwayNormalSegment> arr_roadwayNormalSegment = new ArrayList<>();
    ArrayList<RoadwayDirLinkerComponent> arr_roadwayDirLinkerComponent = new ArrayList<>();

    int i = 0;
    RoadwayNormalPoint roadwayNormalPoint_prev = null;
    for (Point point_curr : pathArr_point) {
      i++;
      RoadwayNormalPoint roadwayNormalPoint_curr = new RoadwayNormalPoint(idRoadway + "-" + i, point_curr);
      arr_roadwayNormalPoint_OO.add(roadwayNormalPoint_curr);
      em.persist(roadwayNormalPoint_curr);

      if (i == 1) {}
      else {
        RoadwayNormalSegment roadwaySegment_btPrevCurr = new RoadwayNormalSegment(roadwayNormalPoint_prev, roadwayNormalPoint_curr);
        arr_roadwayNormalSegment.add(roadwaySegment_btPrevCurr);
        em.persist(roadwaySegment_btPrevCurr);

        RoadwayDirLinkerComponent roadwayLinkerComponent_btPrevToCurr = new RoadwayDirLinkerComponent(roadwaySegment_btPrevCurr, roadwayNormalPoint_curr);
        RoadwayDirLinkerComponent roadwayLinkerComponent_btCurrToPrev = new RoadwayDirLinkerComponent(roadwaySegment_btPrevCurr, roadwayNormalPoint_prev);
        arr_roadwayDirLinkerComponent.add(roadwayLinkerComponent_btPrevToCurr);
        arr_roadwayDirLinkerComponent.add(roadwayLinkerComponent_btCurrToPrev);
        em.persist(roadwayLinkerComponent_btPrevToCurr);
        em.persist(roadwayLinkerComponent_btCurrToPrev);

        roadwayNormalPoint_prev.getMppRoadwayDirLinkerComponent().put(roadwayNormalPoint_curr, roadwayLinkerComponent_btPrevToCurr);
        roadwayNormalPoint_curr.getMppRoadwayDirLinkerComponent().put(roadwayNormalPoint_prev, roadwayLinkerComponent_btCurrToPrev);
      }
      roadwayNormalPoint_prev = roadwayNormalPoint_curr;
    }

    //_____

    em.flush();
    em.clear();

    ArrayList<RoadwayNormalPoint> arr_roadwayNormalPoint_FN = new ArrayList<>();

    int sn = 0;
    for (Point point_curr : pathArr_point) {
      sn++;
      //________________________________________________________________
      RoadwayNormalPoint roadwayNormalPoint_curr_OO = arr_roadwayNormalPoint_OO.get(sn - 1);
      RoadwayNormalPoint roadwayNormalPoint_curr_FN = em.find(RoadwayNormalPoint.class, roadwayNormalPoint_curr_OO.getIdSql());
      arr_roadwayNormalPoint_FN.add(roadwayNormalPoint_curr_FN);
      if (sn == 1) {
        TestUtil.assertEquals_NoStop(1, roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent().size());
        TestUtil.assertTrue_NoStop(roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent().keySet().contains(arr_roadwayNormalPoint_OO.get((sn - 1) + 1)));
        TestUtil.assertTrue_NoStop(roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent().values().contains(arr_roadwayDirLinkerComponent.get(0))); //____________________
      }
      else if (sn == arr_roadwayNormalPoint_OO.size()) {
        TestUtil.assertEquals_NoStop(1, roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent().size());
        TestUtil.assertTrue_NoStop(roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent().keySet().contains(arr_roadwayNormalPoint_OO.get((sn - 1) - 1)));
        TestUtil.assertTrue_NoStop(roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent().values().contains(arr_roadwayDirLinkerComponent.get((sn - 1) * 2 - 1)));
      }
      else {
        TestUtil.assertEquals_NoStop(2, roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent().size());
        TestUtil.assertTrue_NoStop(roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent().keySet().contains(arr_roadwayNormalPoint_OO.get((sn - 1) - 1)));
        TestUtil.assertTrue_NoStop(roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent().keySet().contains(arr_roadwayNormalPoint_OO.get((sn - 1) + 1)));
        TestUtil.assertTrue_NoStop(roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent().values().contains(arr_roadwayDirLinkerComponent.get((sn - 1) * 2 - 1)));
        TestUtil.assertTrue_NoStop(roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent().values().contains(arr_roadwayDirLinkerComponent.get((sn - 1) * 2)));
      }

      TestUtil.assertEquals_NoStop(roadwayNormalPoint_curr_OO.getMppRoadwayDirLinkerComponent(), roadwayNormalPoint_curr_FN.getMppRoadwayDirLinkerComponent());
      TestUtil.assertNotSame_NoStop(roadwayNormalPoint_curr_OO, roadwayNormalPoint_curr_FN);
    }

    TestUtil.assertEquals_NoStop(arr_roadwayNormalPoint_OO, arr_roadwayNormalPoint_FN);
  }

  @Test
  @Transactional
  public void roadway_wrap_list_linker() {
    String idRoadway = "Ro1";

    ArrayList<Point> pathArr_point = new ArrayList<>();
    pathArr_point.add(new Point(100.000000, 100.000000));
    pathArr_point.add(new Point(200.000000, 200.000000));
    pathArr_point.add(new Point(300.000000, 500.000000));

    //__
    RoadwaySolidRoad roadway = new RoadwaySolidRoad(idRoadway);
    List<RoadwayDirLinkerComponent> arr_roadwayLinkerComponent = roadway.getArrRoadwayDirLinkerComponent();
    //__

    ArrayList<RoadwayNormalPoint> arr_roadwayNormalPoint_OO = new ArrayList<>();
    ArrayList<RoadwaySegment> arr_roadwaySegment = new ArrayList<>();
    ArrayList<RoadwayDirLinkerComponent> arr_roadwayDirLinkerComponent = new ArrayList<>();

    int i = 0;
    RoadwayNormalPoint roadwayNormalPoint_prev = null;
    for (Point point_curr : pathArr_point) {
      i++;
      RoadwayNormalPoint roadwayNormalPoint_curr = new RoadwayNormalPoint(idRoadway + "-" + i, point_curr);
      arr_roadwayNormalPoint_OO.add(roadwayNormalPoint_curr);
      em.persist(roadwayNormalPoint_curr);

      if (i == 1) {
        //_______________________________
        //_________________________________________________________________________________________________________________________________________

        //_______________________________________

        RoadwaySegmentPseudoBegin roadwaySegment_btPrevCurr = new RoadwaySegmentPseudoBegin(roadwayNormalPoint_curr, roadwayNormalPoint_curr); //__________________________________________
        arr_roadwaySegment.add(roadwaySegment_btPrevCurr);
        em.persist(roadwaySegment_btPrevCurr); //_______________________________________________________

        RoadwayDirLinkerComponent roadwayLinkerComponent_btPrevToCurr = new RoadwayDirLinkerComponent(roadwaySegment_btPrevCurr, roadwayNormalPoint_curr);
        arr_roadwayDirLinkerComponent.add(roadwayLinkerComponent_btPrevToCurr);
        em.persist(roadwayLinkerComponent_btPrevToCurr);

        arr_roadwayLinkerComponent.add(roadwayLinkerComponent_btPrevToCurr);
      }
      else {
        RoadwayNormalSegment roadwaySegment_btPrevCurr = new RoadwayNormalSegment(roadwayNormalPoint_prev, roadwayNormalPoint_curr);
        arr_roadwaySegment.add(roadwaySegment_btPrevCurr);
        em.persist(roadwaySegment_btPrevCurr);

        RoadwayDirLinkerComponent roadwayLinkerComponent_btPrevToCurr = new RoadwayDirLinkerComponent(roadwaySegment_btPrevCurr, roadwayNormalPoint_curr);
        RoadwayDirLinkerComponent roadwayLinkerComponent_btCurrToPrev = new RoadwayDirLinkerComponent(roadwaySegment_btPrevCurr, roadwayNormalPoint_prev);
        arr_roadwayDirLinkerComponent.add(roadwayLinkerComponent_btPrevToCurr);
        arr_roadwayDirLinkerComponent.add(roadwayLinkerComponent_btCurrToPrev);
        em.persist(roadwayLinkerComponent_btPrevToCurr);
        em.persist(roadwayLinkerComponent_btCurrToPrev);

        roadwayNormalPoint_prev.getMppRoadwayDirLinkerComponent().put(roadwayNormalPoint_curr, roadwayLinkerComponent_btPrevToCurr);
        roadwayNormalPoint_curr.getMppRoadwayDirLinkerComponent().put(roadwayNormalPoint_prev, roadwayLinkerComponent_btCurrToPrev);

        arr_roadwayLinkerComponent.add(roadwayLinkerComponent_btPrevToCurr);
      }
      roadwayNormalPoint_prev = roadwayNormalPoint_curr;
    }
    em.flush();
    em.clear();

    em.persist(roadway);

    //_____

    em.flush();
    em.clear();

    RoadwaySolidRoad roadway_FN = em.find(RoadwaySolidRoad.class, roadway.getIdSql());

    TestUtil.assertEquals_NoStop(pathArr_point.size(), roadway_FN.getArrRoadwayDirLinkerComponent().size());

    TestUtil.assertEquals_NoStop(roadway, roadway_FN);
    TestUtil.assertNotSame_NoStop(roadway, roadway_FN);

    //________________________________
    TestUtil.assertIterableEquals_NoStop(roadway.getArrRoadwayDirLinkerComponent(), roadway_FN.getArrRoadwayDirLinkerComponent());
    TestUtil.assertNotSame_NoStop(roadway.getArrRoadwayDirLinkerComponent(), roadway_FN.getArrRoadwayDirLinkerComponent());

  }

  //_____________

  //______________________________________________________________________
  //_________________________________________________
  @Test
  @Transactional
  public void case__2_point_1_segment_1_linker__point_linker_hashmap_connection__remove_merge() {
    //_____
    String idRoadway = "Ro1";

    ArrayList<Point> pathArr_point = new ArrayList<>();
    pathArr_point.add(new Point(100.000000, 100.000000));
    pathArr_point.add(new Point(200.000000, 200.000000));

    int i = 0;

    i++;
    RoadwayNormalPoint roadwayNormalPoint_prev = new RoadwayNormalPoint(idRoadway + "-" + i, pathArr_point.get(i - 1));
    i++;
    RoadwayNormalPoint roadwayNormalPoint_curr = new RoadwayNormalPoint(idRoadway + "-" + i, pathArr_point.get(i - 1));
    em.persist(roadwayNormalPoint_prev);
    em.persist(roadwayNormalPoint_curr);

    RoadwayNormalSegment roadwaySegment_btPrevCurr = new RoadwayNormalSegment(roadwayNormalPoint_prev, roadwayNormalPoint_curr);
    em.persist(roadwaySegment_btPrevCurr);

    RoadwayDirLinkerComponent roadwayLinkerComponent_btPrevToCurr = new RoadwayDirLinkerComponent(roadwaySegment_btPrevCurr, roadwayNormalPoint_curr);
    em.persist(roadwayLinkerComponent_btPrevToCurr);

    roadwayNormalPoint_prev.getMppRoadwayDirLinkerComponent().put(roadwayNormalPoint_curr, roadwayLinkerComponent_btPrevToCurr);

    em.flush();
    em.clear();

    //_____
    RoadwayNormalPoint roadwayNormalPoint_prev_FN = em.find(RoadwayNormalPoint.class, roadwayNormalPoint_prev.getIdSql());
    roadwayNormalPoint_prev_FN.getMppRoadwayDirLinkerComponent().remove(roadwayNormalPoint_curr);

    TestUtil.assertNotEquals_NoStop(roadwayNormalPoint_prev.getMppRoadwayDirLinkerComponent(), roadwayNormalPoint_prev_FN.getMppRoadwayDirLinkerComponent());
    TestUtil.assertEquals_NoStop(1, roadwayNormalPoint_prev.getMppRoadwayDirLinkerComponent().size());
    TestUtil.assertEquals_NoStop(0, roadwayNormalPoint_prev_FN.getMppRoadwayDirLinkerComponent().size());
    em.flush();
    em.clear();

    //_____
    RoadwayNormalPoint roadwayNormalPoint_prev_FN_02 = em.find(RoadwayNormalPoint.class, roadwayNormalPoint_prev_FN.getIdSql());

    TestUtil.assertEquals_NoStop(1, roadwayNormalPoint_prev.getMppRoadwayDirLinkerComponent().size());
    TestUtil.assertEquals_NoStop(0, roadwayNormalPoint_prev_FN.getMppRoadwayDirLinkerComponent().size());
    TestUtil.assertEquals_NoStop(0, roadwayNormalPoint_prev_FN_02.getMppRoadwayDirLinkerComponent().size());
    em.flush();
    em.clear(); //______________________________________________________________________________________________

    //_____
    RoadwayNormalPoint roadwayNormalPoint_prev_FN_03 = em.merge(roadwayNormalPoint_prev);
    em.flush();
    em.clear();

    //_____
    RoadwayNormalPoint roadwayNormalPoint_prev_FN_04 = em.find(RoadwayNormalPoint.class, roadwayNormalPoint_prev_FN.getIdSql());

    TestUtil.assertEquals_NoStop(1, roadwayNormalPoint_prev.getMppRoadwayDirLinkerComponent().size());
    TestUtil.assertEquals_NoStop(0, roadwayNormalPoint_prev_FN.getMppRoadwayDirLinkerComponent().size());
    TestUtil.assertEquals_NoStop(0, roadwayNormalPoint_prev_FN_02.getMppRoadwayDirLinkerComponent().size());
    TestUtil.assertEquals_NoStop(1, roadwayNormalPoint_prev_FN_04.getMppRoadwayDirLinkerComponent().size());

    TestUtil.assertEquals_NoStop(roadwayNormalPoint_prev.getMppRoadwayDirLinkerComponent(), roadwayNormalPoint_prev_FN_04.getMppRoadwayDirLinkerComponent());

  }

  //_______
  //________________
  //___________________________________________________________________________________________________________
  //_____________________________
  //
  //_______________________________________________________
  //_________________________________________________________
  //_________________________________________________________
  //
  //______________
  //
  //________
  //_______________________________________________________________________________________________________________________
  //________
  //_______________________________________________________________________________________________________________________
  //________________________________________
  //________________________________________
  //
  //________________________________________________________________________________________________________________________________
  //__________________________________________
  //
  //______________________________________________________________________________________________________________________________________________________
  //____________________________________________________
  //
  //________________________________________________________________________________________________________________________________
  //______________________________________________________________________________________________________
  //__________________________________________________________________________________________________________________________________________________________________________________
  //____
  //
  //______________________________________________________________________________________________________
  //
  //_____________________
  //_____________________
  //
  //_____________________________________________________________________________________________________________________________
  //
  //____________________________________________________________________________________________________________
  //
  //______________________________________________________________________________________________________________________________________________________
  //__________________________________________________________________________________________________________________________________________________________________
  //_______________________________________________________________________________________________________________________________________________________
  //___________________________________________________________________________________________________________________________________________________________________
  //___

}
